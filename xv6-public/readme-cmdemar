Claire DeMars
Advanced OS
Project 3
Due 3/6/2018


Changes Made:
	- sycall setup: user.h, syscall.h, syscall.c, sysproc.c, defs.h, proc.c
	
	- thread_lib.h: in thread_create() allocating the stack (and calling clone) and in thread_join() freeing the stack (and calling join). Also, user locks.
	- undo check for 0 in argptr() (since we need to pass NULL to system call clone via the producer function)
	
	
	- I put an is_thread flag in proc and made fork and clone set it appropriately
	
	- clone (in proc.c) is basically fork but shallow copies the pgdir and files, puts the arg in the stack, points the trapframe sp and ip to the right places. I also have it setting a heap-specific lock (and lock pointer) to show you how they fail (fork actually initializes that lock) )
	
	- kernel locks: The problem we talked about came back. In growproc(), there are vars you can toggle in growproc() to see them causing panic (both for all heaps and a specific heap)
	
	- join (in proc.c) is basically wait but looks for a specific thread, and doesn't free it's pgdir
	
	- wait now ignores non-threads (based on the is_thread flag)
	
	- exit doesn't close files of threads
		

